generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PlaylistAccess {
  PUBLIC
  PRIVATE
}

enum RecommendationType {
  MADE_FOR_YOU
  DISCOVERY
  NEW_MUSIC
}

model User {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  email              String               @unique
  password           String?
  firstname          String
  lastname           String?
  role               Role?
  playlists          Playlist[]
  tracks             Track[]
  favorites          Favorite[]
  listeningHistory   ListeningHistory[]
  recommendations    Recommendation[]
  avatar             String?
  banner             String?
  ArtistSubscription ArtistSubscription[]
}

model Playlist {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  name       String
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  tracks     Track[]        @relation("PlaylistTracks")
  access     PlaylistAccess @default(PRIVATE)
  coverPhoto String?
}

model Track {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  title            String
  duration         Int
  albumId          String
  authorId         String?
  album            Album              @relation(fields: [albumId], references: [id])
  author           Artist?            @relation(name: "ArtistToTrack", fields: [authorId], references: [id])
  audioFilePath    String
  coverImagePath   String
  users            User[]
  playlists        Playlist[]         @relation("PlaylistTracks")
  favorites        Favorite[]
  ListeningHistory ListeningHistory[]
  Recommendation   Recommendation[]
  Lyric            Lyric[]
}

model Album {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String
  releaseDate DateTime
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id])
  tracks      Track[]
  genreId     String
  genre       Genre    @relation(fields: [genreId], references: [id])
  coverUrl    String?
}

model Artist {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  name       String    @unique
  coverPhoto String?
  albums     Album[]
  Track      Track[]   @relation(name: "ArtistToTrack")
  podcasts   Podcast[] @relation("ArtistPodcasts")

  ArtistSubscription ArtistSubscription[]
}

model Genre {
  id     String  @id @default(uuid())
  name   String  @unique
  albums Album[]
}

model Favorite {
  id      String @id @default(uuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  trackId String
  track   Track  @relation(fields: [trackId], references: [id])
}

model ListeningHistory {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  trackId    String
  track      Track    @relation(fields: [trackId], references: [id])
  listenedAt DateTime @default(now())
}

model Recommendation {
  id        Int                @id @default(autoincrement())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  trackId   String
  track     Track              @relation(fields: [trackId], references: [id])
  type      RecommendationType
  createdAt DateTime           @default(now())
}

model Lyric {
  id        String   @id @default(uuid())
  text      String
  timestamp Float
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Podcast {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  title       String
  description String
  hostId      String
  host        Artist           @relation("ArtistPodcasts", fields: [hostId], references: [id])
  coverUrl    String?
  episodes    PodcastEpisode[]
}

model PodcastEpisode {
  id             String   @id @default(uuid())
  title          String
  description    String
  audioFilePath  String
  duration       Int
  podcastId      String
  podcast        Podcast  @relation(fields: [podcastId], references: [id])
  releaseDate    DateTime @default(now())
  coverImagePath String?
}

model ArtistSubscription {
  id        String   @id @default(uuid())
  userId    String
  artistId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  artist    Artist   @relation(fields: [artistId], references: [id])

  @@unique([userId, artistId])
}
